/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.9.v20180320
 * Generated at: 2020-05-15 15:26:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.my;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class publish_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


private String htmlspecialchars(String str) {
	str = str.replaceAll("&", "&amp;");
	str = str.replaceAll("<", "&lt;");
	str = str.replaceAll(">", "&gt;");
	str = str.replaceAll("\"", "&quot;");
	return str;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

request.setCharacterEncoding("UTF-8");
String htmlData = request.getParameter("content1") != null ? request.getParameter("content1") : "";

      out.write("\r\n");
      out.write("<!doctype html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"utf-8\" />\r\n");
      out.write("\t<title>KindEditor JSP</title>\r\n");
      out.write("\t\t<link rel=\"stylesheet\" href=\"/resource/kindeditor/themes/default/default.css\" />\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"/resource/kindeditor/plugins/code/prettify.css\" />\r\n");
      out.write("\t<script charset=\"utf-8\" src=\"/resource/kindeditor/kindeditor.js\"></script>\r\n");
      out.write("\t<script charset=\"utf-8\" src=\"/resource/kindeditor/lang/zh-CN.js\"></script>\r\n");
      out.write("\t<script charset=\"utf-8\" src=\"/resource/kindeditor/plugins/code/prettify.js\"></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tKindEditor.ready(function(K) {\r\n");
      out.write("\t\t\twindow.editor1 = K.create('textarea[name=\"content1\"]', {\r\n");
      out.write("\t\t\t\tcssPath : '/resource/kindeditor/plugins/code/prettify.css',\r\n");
      out.write("\t\t\t\tuploadJson : '/resource/kindeditor/jsp/upload_json.jsp',\r\n");
      out.write("\t\t\t\tfileManagerJson : '/resource/kindeditor/jsp/file_manager_json.jsp',\r\n");
      out.write("\t\t\t\tallowFileManager : true,\r\n");
      out.write("\t\t\t\tafterCreate : function() {\r\n");
      out.write("\t\t\t\t\tvar self = this;\r\n");
      out.write("\t\t\t\t\tK.ctrl(document, 13, function() {\r\n");
      out.write("\t\t\t\t\t\tself.sync();\r\n");
      out.write("\t\t\t\t\t\tdocument.forms['example'].submit();\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\tK.ctrl(self.edit.doc, 13, function() {\r\n");
      out.write("\t\t\t\t\t\tself.sync();\r\n");
      out.write("\t\t\t\t\t\tdocument.forms['example'].submit();\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tprettyPrint();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<form id=\"publishForm\">\r\n");
      out.write("\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t<label for=\"title\">文章标题</label>\r\n");
      out.write("\t\t\t<input type=\"text\" id=\"title\" class=\"form-control\" name=\"title\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"form-group form-inline\">\r\n");
      out.write("\t\t\t所属栏目:<select class=\"form-control\" id=\"channel\" name=\"channelId\">\r\n");
      out.write("\t\t\t\t\t<option value=\"0\">请选择</option>\r\n");
      out.write("\t\t\t\t  </select>\r\n");
      out.write("\t\t\t所属分类:<select class=\"form-control\" id=\"category\" name=\"categoryId\">\r\n");
      out.write("\t\t\t\t  \t<option value=\"0\">请选择</option>\r\n");
      out.write("\t\t\t\t  </select>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t    <input type=\"file\" name=\"file\" class=\"form-control-file\" id=\"uploadfile\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- 文章內容 -->\r\n");
      out.write("\t\t<textarea name=\"content1\" cols=\"100\" rows=\"8\" style=\"width:920px;height:200px;visibility:hidden;\">");
      out.print(htmlspecialchars(htmlData));
      out.write("</textarea>\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<input type=\"button\" class=\"btn btn-info\" value=\"发布文章\" onclick=\"publish()\" />\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t\t$.get(\"/channel/channels\",function(channelList){\r\n");
      out.write("\t\t\tvar html = \"\";\r\n");
      out.write("\t\t\t//遍历栏目为下拉框赋值\r\n");
      out.write("\t\t\t$(channelList).each(function(index,channel){\r\n");
      out.write("\t\t\t\thtml+=\"<option value=\"+channel.id+\">\"+channel.name+\"</option>\";\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t\t$(\"select#channel\").append(html);\r\n");
      out.write("\t\t},\"json\");\r\n");
      out.write("\t});\r\n");
      out.write("\t//为栏目添加改变时间，获取对应的分类信息\r\n");
      out.write("\t$(\"select#channel\").change(function(){\r\n");
      out.write("\t\t$(\"select#category option:gt(0)\").remove();\r\n");
      out.write("\t\t//获取当前的栏目id\r\n");
      out.write("\t\tvar channelId = $(this).val();\r\n");
      out.write("\t\tif(channelId){\r\n");
      out.write("\t\t\t$.get(\"/channel/categories\",\r\n");
      out.write("\t\t\t\t\t{\"channelId\":channelId},\r\n");
      out.write("\t\t\t\tfunction(categoryList){\r\n");
      out.write("\t\t\t\t\tvar html = \"\";\r\n");
      out.write("\t\t\t\t\t//遍历栏目为下拉框赋值\r\n");
      out.write("\t\t\t\t\t$(categoryList).each(function(index,category){\r\n");
      out.write("\t\t\t\t\t\thtml+=\"<option value=\"+category.id+\">\"+category.name+\"</option>\";\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t$(\"select#category\").append(html);\r\n");
      out.write("\t\t\t\t},\"json\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t})\r\n");
      out.write("\tfunction publish(){\r\n");
      out.write("\t\tvar formData = new FormData($(\"#publishForm\")[0]);\r\n");
      out.write("\t\t//封装文章内容\r\n");
      out.write("\t\tformData.set(\"content\",editor1.html());\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl:\"/my/publish\",\r\n");
      out.write("\t\t\ttype:\"post\",\r\n");
      out.write("\t\t\tdata:formData,\r\n");
      out.write("\t\t\tprocessData:false,\r\n");
      out.write("\t\t\tcontentType:false,\r\n");
      out.write("\t\t\tsuccess:function(success){\r\n");
      out.write("\t\t\t\tif(success){\r\n");
      out.write("\t\t\t\t\talert(\"发布成功!\");\r\n");
      out.write("\t\t\t\t\t//发布成功直接跳转到我的文章页面\r\n");
      out.write("\t\t\t\t\tlocation.href=\"/my\";\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\talert(\"添加文章失败!\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
